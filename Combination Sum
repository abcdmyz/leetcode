class Solution {
public:
    void dfs(vector<int> &candis, int target, int count, vector<int> &cur, vector<vector<int>> &solution)
    {
        if (count > target)
        {
            return;
        }
        else if (count == target)
        {
            solution.push_back(cur);
            return;
        }
        
        for (int i = 0; i < candis.size(); i++)
        {
            if (count + candis[i] <= target &&(cur.empty() || candis[i] >= cur[cur.size() - 1]))
            {
                cur.push_back(candis[i]);
                dfs(candis, target, count+candis[i], cur, solution);
                cur.pop_back();
            }
        }
    }

    vector<vector<int>> combinationSum(vector<int> &candidates, int target) 
    {
        vector<vector<int>> solution;
        vector<int> cur;
        
        dfs(candidates, target, 0, cur, solution);
        
        return solution;
    }
};
