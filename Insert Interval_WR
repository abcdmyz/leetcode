/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    int findMin(int a, int b)
    {
        if (a < b)
        {
            return a;
        }
        return b;
    }
    
    int findMax(int a, int b)
    {
        if (a > b)
        {
            return a;
        }
        return b;
    }
    
    vector<Interval> insert(vector<Interval> &intervals, Interval newInterval) 
    {
        vector<Interval> news;
        vector<Interval> newss;
        
        Interval cur;
        cur.start = cur.end = -1;
        int start = intervals.size();
        bool insert = false;
        
        for (int i = 0; i < intervals.size(); i++)
        {
            if (newInterval.start >= intervals[i].start && newInterval.end <= intervals[i].end)
            {
                news.push_back(intervals[i]);
                insert = true;
            }
            else if ((newInterval.end >= intervals[i].start && newInterval.end <= intervals[i].end) 
                    || (newInterval.start >= intervals[i].start && newInterval.start <= intervals[i].end))
            {
                if (cur.start == -1 && cur.end == -1)
                {
                    cur.start = findMin(newInterval.start, intervals[i].start);
                    cur.end = findMax(newInterval.end, intervals[i].end);
                }
                else
                {
                     cur.end = findMax(cur.end, intervals[i].end);
                }
            }
            else
            {
                if (cur.start != -1)
                {
                    news.push_back(cur);
                    cur.start = cur.end = -1;
                    insert = true;
                }
                else if (newInterval.end <= intervals[i].start && !insert)
                {
                    news.push_back(newInterval);
                    insert = true;
                }
                
                news.push_back(intervals[i]); 
            }
        }
        
        
        if (!insert)
        {
            if (cur.start != -1)
            {
                news.push_back(cur);
            }
            else
            {
                news.push_back(newInterval);
            }
        }
        
    
        return news;
    }
};
