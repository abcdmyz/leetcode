/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    static bool cmp(const Interval &a, const Interval &b)
    {
        return a.start < b.start;    
    }
    
    vector<Interval> merge(vector<Interval> &intervals) 
    {
        vector<Interval> res;
        
        if (intervals.size() == 0)
        {
            return res;
        }
        
        sort(intervals.begin(), intervals.end(), Solution::cmp);
        
        int start = intervals[0].start;
        int end = intervals[0].end;
        
        for (int i = 1; i < intervals.size(); i++)
        {
            if (intervals[i].start >= start && intervals[i].start <= end)
            {
                if (intervals[i].end > end)
                {
                    end = intervals[i].end;
                }
            }
            else
            {
                Interval tmpInter(start, end);
                res.push_back(tmpInter);
                start = intervals[i].start;
                end = intervals[i].end;
            }
        }
        
        Interval tmpInter(start, end);
        res.push_back(tmpInter);
        
        return res;
    }
};
