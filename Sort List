/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution 
{
public:
    ListNode *combine(ListNode *l1, ListNode *l2)
    {
        ListNode *h1 = l1;
        ListNode *h2 = l2;
        
        ListNode node(0);
        ListNode *head = &node;
        
        ListNode *cur = head;
        
        while (h1 != NULL && h2 != NULL)
        {
            if (h1->val < h2->val)
            {
                cur->next = h1;
                h1 = h1->next;
            }
            else
            {
                cur->next = h2;
                h2 = h2->next;
            }
            
            cur = cur->next;
        }
        
        if (h1 != NULL)
        {
            while (h1 != NULL)
            {
                cur->next = h1;
                h1 = h1->next;
                cur = cur->next;
            }
        }
        else if (h2 != NULL)
        {
            while (h2 != NULL)
            {
                cur->next = h2;
                h2 = h2->next;
                cur = cur->next;
            }
        }
        
        return head->next;
    }
    
    ListNode *splitSort(ListNode *head)
    {
        if (head == NULL || head->next == NULL)
        {
            return head;
        }
        
        ListNode *h1 = head;
        ListNode *h2 = head->next;
        
        while (h2->next != NULL)
        {
            h2 = h2->next;
            if (h2->next != NULL)
            {
                h2 = h2->next;
            }
            h1 = h1->next;
        }
        
        ListNode *mid = h1->next;
        h1->next = NULL;
        
        ListNode *new1 = splitSort(head);
        ListNode *new2 = splitSort(mid);
        
        return combine(new1, new2);
    }
    
    ListNode *sortList(ListNode *head) 
    {
        return splitSort(head);
    }
};
