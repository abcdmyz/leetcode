/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *reverseBetween(ListNode *head, int m, int n) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        
        if (m == n)
        {
            return head;
        }
        
        int i = 1;
        
        ListNode *new_head = head;
        ListNode *cur = head;
        ListNode *prev, *next, *rev_head, *rev_tail, *rev_prev;
        
        rev_prev = NULL;
        while (i < m)
        {
            rev_prev = cur;
            cur = cur->next;
            i++;
        }
        rev_head = cur;
        
        next = cur->next;
        while (i < n)
        {
            prev = cur;
            cur = next;
            next = cur->next;            
            cur->next = prev;
            
            i++;
        }
        rev_tail = cur;
        
        if (rev_prev != NULL)
        {
            rev_prev->next = rev_tail;
            rev_head->next = next;
        }
        else
        {
            new_head = rev_tail;
            rev_head->next = next;
        }
        
        return new_head;
    }
};
