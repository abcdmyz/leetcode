/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > zigzagLevelOrder(TreeNode *root) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        
        vector<vector<int>> tree;
        vector<int> level;
        
        if (root == NULL)
            return tree;
        
        queue<TreeNode*> rq;
        
        rq.push(root);
        
        int l1 = 1;
        int l2 = 0;
        int zig = true;
        level.clear();
        
        while ( !rq.empty() )
        {
            TreeNode* tmp = rq.front();
            rq.pop();
            
            if (zig)
            {
                level.push_back(tmp->val);
            }
            else
            {
                level.insert(level.begin(), tmp->val);
            }
            l1--;
            
            if (tmp->left != NULL)
            {
                rq.push(tmp->left);
                l2++;
            }
            if (tmp->right != NULL)
            {
                rq.push(tmp->right);
                l2++;
            }
            
            if (l1 <= 0)
            {
                l1 = l2;
                l2 = 0;
                tree.push_back(level);
                level.clear();
                zig = !zig;
            }
        }
        
        return tree;
    }
};
